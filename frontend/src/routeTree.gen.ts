/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ResetPasswordRouteImport } from './routes/reset-password'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ForgotPasswordRouteImport } from './routes/forgot-password'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProductsIndexRouteImport } from './routes/products/index'
import { Route as FarmsIndexRouteImport } from './routes/farms/index'
import { Route as FarmIndexRouteImport } from './routes/farm/index'
import { Route as EventsIndexRouteImport } from './routes/events/index'
import { Route as EventIndexRouteImport } from './routes/event/index'
import { Route as ProductsIdRouteImport } from './routes/products/$id'
import { Route as ProductIdRouteImport } from './routes/product/$id'
import { Route as FarmsIdRouteImport } from './routes/farms/$id'
import { Route as FarmIdRouteImport } from './routes/farm/$id'
import { Route as EventsIdRouteImport } from './routes/events/$id'
import { Route as EventIdRouteImport } from './routes/event/$id'

const ResetPasswordRoute = ResetPasswordRouteImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ForgotPasswordRoute = ForgotPasswordRouteImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsIndexRoute = ProductsIndexRouteImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => rootRouteImport,
} as any)
const FarmsIndexRoute = FarmsIndexRouteImport.update({
  id: '/farms/',
  path: '/farms/',
  getParentRoute: () => rootRouteImport,
} as any)
const FarmIndexRoute = FarmIndexRouteImport.update({
  id: '/farm/',
  path: '/farm/',
  getParentRoute: () => rootRouteImport,
} as any)
const EventsIndexRoute = EventsIndexRouteImport.update({
  id: '/events/',
  path: '/events/',
  getParentRoute: () => rootRouteImport,
} as any)
const EventIndexRoute = EventIndexRouteImport.update({
  id: '/event/',
  path: '/event/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsIdRoute = ProductsIdRouteImport.update({
  id: '/products/$id',
  path: '/products/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductIdRoute = ProductIdRouteImport.update({
  id: '/product/$id',
  path: '/product/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const FarmsIdRoute = FarmsIdRouteImport.update({
  id: '/farms/$id',
  path: '/farms/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const FarmIdRoute = FarmIdRouteImport.update({
  id: '/farm/$id',
  path: '/farm/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const EventsIdRoute = EventsIdRouteImport.update({
  id: '/events/$id',
  path: '/events/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const EventIdRoute = EventIdRouteImport.update({
  id: '/event/$id',
  path: '/event/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/reset-password': typeof ResetPasswordRoute
  '/event/$id': typeof EventIdRoute
  '/events/$id': typeof EventsIdRoute
  '/farm/$id': typeof FarmIdRoute
  '/farms/$id': typeof FarmsIdRoute
  '/product/$id': typeof ProductIdRoute
  '/products/$id': typeof ProductsIdRoute
  '/event': typeof EventIndexRoute
  '/events': typeof EventsIndexRoute
  '/farm': typeof FarmIndexRoute
  '/farms': typeof FarmsIndexRoute
  '/products': typeof ProductsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/reset-password': typeof ResetPasswordRoute
  '/event/$id': typeof EventIdRoute
  '/events/$id': typeof EventsIdRoute
  '/farm/$id': typeof FarmIdRoute
  '/farms/$id': typeof FarmsIdRoute
  '/product/$id': typeof ProductIdRoute
  '/products/$id': typeof ProductsIdRoute
  '/event': typeof EventIndexRoute
  '/events': typeof EventsIndexRoute
  '/farm': typeof FarmIndexRoute
  '/farms': typeof FarmsIndexRoute
  '/products': typeof ProductsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/reset-password': typeof ResetPasswordRoute
  '/event/$id': typeof EventIdRoute
  '/events/$id': typeof EventsIdRoute
  '/farm/$id': typeof FarmIdRoute
  '/farms/$id': typeof FarmsIdRoute
  '/product/$id': typeof ProductIdRoute
  '/products/$id': typeof ProductsIdRoute
  '/event/': typeof EventIndexRoute
  '/events/': typeof EventsIndexRoute
  '/farm/': typeof FarmIndexRoute
  '/farms/': typeof FarmsIndexRoute
  '/products/': typeof ProductsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/forgot-password'
    | '/login'
    | '/profile'
    | '/register'
    | '/reset-password'
    | '/event/$id'
    | '/events/$id'
    | '/farm/$id'
    | '/farms/$id'
    | '/product/$id'
    | '/products/$id'
    | '/event'
    | '/events'
    | '/farm'
    | '/farms'
    | '/products'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/forgot-password'
    | '/login'
    | '/profile'
    | '/register'
    | '/reset-password'
    | '/event/$id'
    | '/events/$id'
    | '/farm/$id'
    | '/farms/$id'
    | '/product/$id'
    | '/products/$id'
    | '/event'
    | '/events'
    | '/farm'
    | '/farms'
    | '/products'
  id:
    | '__root__'
    | '/'
    | '/forgot-password'
    | '/login'
    | '/profile'
    | '/register'
    | '/reset-password'
    | '/event/$id'
    | '/events/$id'
    | '/farm/$id'
    | '/farms/$id'
    | '/product/$id'
    | '/products/$id'
    | '/event/'
    | '/events/'
    | '/farm/'
    | '/farms/'
    | '/products/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ForgotPasswordRoute: typeof ForgotPasswordRoute
  LoginRoute: typeof LoginRoute
  ProfileRoute: typeof ProfileRoute
  RegisterRoute: typeof RegisterRoute
  ResetPasswordRoute: typeof ResetPasswordRoute
  EventIdRoute: typeof EventIdRoute
  EventsIdRoute: typeof EventsIdRoute
  FarmIdRoute: typeof FarmIdRoute
  FarmsIdRoute: typeof FarmsIdRoute
  ProductIdRoute: typeof ProductIdRoute
  ProductsIdRoute: typeof ProductsIdRoute
  EventIndexRoute: typeof EventIndexRoute
  EventsIndexRoute: typeof EventsIndexRoute
  FarmIndexRoute: typeof FarmIndexRoute
  FarmsIndexRoute: typeof FarmsIndexRoute
  ProductsIndexRoute: typeof ProductsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/reset-password': {
      id: '/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof ResetPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/forgot-password': {
      id: '/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof ForgotPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/': {
      id: '/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/farms/': {
      id: '/farms/'
      path: '/farms'
      fullPath: '/farms'
      preLoaderRoute: typeof FarmsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/farm/': {
      id: '/farm/'
      path: '/farm'
      fullPath: '/farm'
      preLoaderRoute: typeof FarmIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events/': {
      id: '/events/'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof EventsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/event/': {
      id: '/event/'
      path: '/event'
      fullPath: '/event'
      preLoaderRoute: typeof EventIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/$id': {
      id: '/products/$id'
      path: '/products/$id'
      fullPath: '/products/$id'
      preLoaderRoute: typeof ProductsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/product/$id': {
      id: '/product/$id'
      path: '/product/$id'
      fullPath: '/product/$id'
      preLoaderRoute: typeof ProductIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/farms/$id': {
      id: '/farms/$id'
      path: '/farms/$id'
      fullPath: '/farms/$id'
      preLoaderRoute: typeof FarmsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/farm/$id': {
      id: '/farm/$id'
      path: '/farm/$id'
      fullPath: '/farm/$id'
      preLoaderRoute: typeof FarmIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events/$id': {
      id: '/events/$id'
      path: '/events/$id'
      fullPath: '/events/$id'
      preLoaderRoute: typeof EventsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/event/$id': {
      id: '/event/$id'
      path: '/event/$id'
      fullPath: '/event/$id'
      preLoaderRoute: typeof EventIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ForgotPasswordRoute: ForgotPasswordRoute,
  LoginRoute: LoginRoute,
  ProfileRoute: ProfileRoute,
  RegisterRoute: RegisterRoute,
  ResetPasswordRoute: ResetPasswordRoute,
  EventIdRoute: EventIdRoute,
  EventsIdRoute: EventsIdRoute,
  FarmIdRoute: FarmIdRoute,
  FarmsIdRoute: FarmsIdRoute,
  ProductIdRoute: ProductIdRoute,
  ProductsIdRoute: ProductsIdRoute,
  EventIndexRoute: EventIndexRoute,
  EventsIndexRoute: EventsIndexRoute,
  FarmIndexRoute: FarmIndexRoute,
  FarmsIndexRoute: FarmsIndexRoute,
  ProductsIndexRoute: ProductsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
