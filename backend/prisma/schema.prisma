// This is your Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------- ENUMS ---------------

enum Role {
  CUSTOMER
  FARMER
  ADMIN
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
}

// ------------------- USER -------------------

model User {
  id                  Int               @id @default(autoincrement())
  email               String            @unique
  password            String
  name                String
  phone               String
  role                Role              @default(CUSTOMER)
  orders              Order[]           @relation("BuyerOrders")
  refreshToken        String?
  resetToken          String?

  farms               Farm[]
  offers              Offer[]
  reviews             Review[]
  organizedEvents     Event[]           @relation("OrganizedEvents")
  eventParticipations EventParticipant[]
}

// ------------------- FARM -------------------

model Farm {
  id            Int           @id @default(autoincrement())
  name          String
  description   String?
  city          String
  street        String
  region        String
  postalCode    String
  country       String
  createdAt     DateTime      @default(now())

  farmer        User          @relation(fields: [farmerId], references: [id], onDelete: Cascade)
  farmerId      Int

  images        FarmImage[]
  farmProducts  FarmProduct[]
}

model FarmImage {
  id       Int    @id @default(autoincrement())
  url      String
  farm     Farm   @relation(fields: [farmId], references: [id], onDelete: Cascade)
  farmId   Int
}

// ------------------- PRODUCT -------------------

model Product {
  id            Int             @id @default(autoincrement())
  name          String
  category      String
  description   String
  basePrice     Float?
  rating        Float           @default(0)
  createdAt     DateTime        @default(now())

  orderItems    OrderItem[]   
  reviews       Review[]
  eventLinks    EventProduct[]
  images        ProductImage[]
  offers        Offer[]
  farmLinks     FarmProduct[]
}

model ProductImage {
  id          Int       @id @default(autoincrement())
  url         String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int
}

// ------------------- FARM PRODUCT -------------------

model FarmProduct {
  id         Int       @id @default(autoincrement())
  price      Float
  stock      Int       @default(0)
  createdAt  DateTime  @default(now())

  farmId     Int
  farm       Farm      @relation(fields: [farmId], references: [id], onDelete: Cascade)

  productId  Int
  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([farmId, productId])
}

// ------------------- OFFER -------------------

model Offer {
  id          Int         @id @default(autoincrement())
  title       String
  description String?
  category    String
  price       Float
  imageUrl    String?
  createdAt   DateTime    @default(now())
  isActive    Boolean     @default(true)

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int

  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int
}

// ------------------- ORDER -------------------

model Order {
  id                 Int          @id @default(autoincrement())
  createdAt          DateTime     @default(now())

  buyer              User         @relation("BuyerOrders", fields: [buyerId], references: [id], onDelete: Cascade)
  buyerId            Int

  deliveryCity       String
  deliveryStreet     String
  deliveryRegion     String
  deliveryPostalCode String
  deliveryCountry    String

  isDelivered        Boolean      @default(false)
  isPaid             Boolean      @default(false)
  paymentMethod      PaymentMethod
  totalPrice         Float?       

  items              OrderItem[]
}

model OrderItem {
  id           Int        @id @default(autoincrement())
  order        Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId      Int

  product      Product?   @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId    Int?
  quantity     Int

  unitPrice    Float
  sellerName   String
  productName  String
}

// ------------------- EVENT -------------------

model Event {
  id              Int                 @id @default(autoincrement())
  title           String
  description     String?
  startDate       DateTime
  endDate         DateTime
  city            String
  street          String
  region          String
  postalCode      String
  country         String
  createdAt       DateTime            @default(now())

  organizer       User                @relation("OrganizedEvents", fields: [organizerId], references: [id], onDelete: Cascade)
  organizerId     Int

  participants    EventParticipant[]
  eventProducts   EventProduct[]
}

model EventParticipant {
  id        Int     @id @default(autoincrement())
  event     Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

model EventProduct {
  id         Int      @id @default(autoincrement())
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId    Int
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
}

// ------------------- REVIEW -------------------

model Review {
  id          Int       @id @default(autoincrement())
  rating      Int
  comment     String?
  createdAt   DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int

  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int
}
