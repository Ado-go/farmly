// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------- ENUMS ---------------

enum Role {
  CUSTOMER
  FARMER
  ADMIN
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
}


// ------------------- USER -------------------

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String
  name          String
  phone         String
  role          Role      @default(CUSTOMER)
  orders        Order[]   @relation("BuyerOrders")
  soldOrders    Order[]   @relation("SellerOrders")
  refreshToken  String?
  resetToken    String?

  farms         Farm[]
  offers        Offer[]
  reviews       Review[]
  organizedEvents Event[] @relation("OrganizedEvents")
  eventParticipations EventParticipant[]
}

// ------------------- FARM -------------------

model Farm {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  city        String
  street      String
  region      String
  postalCode  String
  country     String
  createdAt   DateTime    @default(now())
  farmer      User        @relation(fields: [farmerId], references: [id])
  farmerId    Int
  products    Product[]
  images      FarmImage[]
}

model FarmImage {
  id      Int    @id @default(autoincrement())
  url     String
  farm    Farm   @relation(fields: [farmId], references: [id])
  farmId  Int
}

// ------------------- PRODUCT -------------------

model Product {
  id           Int            @id @default(autoincrement())
  name         String
  category     String
  description  String
  price        Float
  rating       Float           @default(0)
  farm         Farm            @relation(fields: [farmId], references: [id])
  farmId       Int
  orderItems   OrderItem[]   
  reviews      Review[]
  eventLinks   EventProduct[]
  images       ProductImage[]
  offers       Offer[]
}

model ProductImage {
  id         Int       @id @default(autoincrement())
  url        String
  product    Product   @relation(fields: [productId], references: [id])
  productId  Int
}

// ------------------- OFFER -------------------

model Offer {
  id          Int         @id @default(autoincrement())
  title       String
  description String?
  category    String
  price       Float
  imageUrl    String?
  createdAt   DateTime    @default(now())

  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  product     Product    @relation(fields: [productId], references: [id])
  productId   Int
}


// ------------------- ORDER -------------------

model Order {
  id             Int         @id @default(autoincrement())
  createdAt      DateTime    @default(now())

  buyer          User        @relation("BuyerOrders", fields: [buyerId], references: [id])
  buyerId        Int

  seller         User        @relation("SellerOrders", fields: [sellerId], references: [id])
  sellerId       Int

  deliveryCity       String
  deliveryStreet     String
  deliveryRegion     String
  deliveryPostalCode String
  deliveryCountry    String

  isDelivered    Boolean     @default(false)
  isPaid         Boolean     @default(false)

  paymentMethod  PaymentMethod

  items          OrderItem[]
}

model OrderItem {
  id        Int         @id @default(autoincrement())
  order     Order       @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product     @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
}

// ------------------- EVENT -------------------

model Event {
  id          Int         @id @default(autoincrement())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  city        String
  street      String
  region      String
  postalCode  String
  country     String
  createdAt   DateTime    @default(now())
  organizer   User        @relation("OrganizedEvents", fields: [organizerId], references: [id])
  organizerId Int
  participants EventParticipant[]
  eventProducts EventProduct[]
}

model EventParticipant {
  id      Int    @id @default(autoincrement())
  event   Event  @relation(fields: [eventId], references: [id])
  eventId Int
  user    User   @relation(fields: [userId], references: [id])
  userId  Int
}

model EventProduct {
  id        Int      @id @default(autoincrement())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
}

// ------------------- REVIEW -------------------

model Review {
  id          Int       @id @default(autoincrement())
  rating      Int
  comment     String?
  createdAt   DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id])
  userId      Int

  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
}